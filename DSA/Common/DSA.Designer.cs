//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DSAModel", "FK_Accounts_AccountTypes", "AccountTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.AccountType), "Accounts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Accounts_Currencies", "Currencies", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.Currency), "Accounts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Accounts_FixedRates", "FixedRates", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.FixedRate), "Accounts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Account), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Appointments_AppointmentStatus", "AppointmentStatus", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.AppointmentStatu), "Appointments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Appointment), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Appointments_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.User), "Appointments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Appointment), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Towns_Countries", "Countries", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.Country), "Towns", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Town), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Users_Towns", "Towns", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.Town), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.User), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Transactions_TransactionTypes", "TransactionTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.TransactionType), "Transactions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.Transaction), true)]
[assembly: EdmRelationshipAttribute("DSAModel", "FK_Users_UserRoles", "UserRoles", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Common.UserRole), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Common.User), true)]

#endregion

namespace Common
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DSAEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DSAEntities object using the connection string found in the 'DSAEntities' section of the application configuration file.
        /// </summary>
        public DSAEntities() : base("name=DSAEntities", "DSAEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DSAEntities object.
        /// </summary>
        public DSAEntities(string connectionString) : base(connectionString, "DSAEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DSAEntities object.
        /// </summary>
        public DSAEntities(EntityConnection connection) : base(connection, "DSAEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Accounts
        {
            get
            {
                if ((_Accounts == null))
                {
                    _Accounts = base.CreateObjectSet<Account>("Accounts");
                }
                return _Accounts;
            }
        }
        private ObjectSet<Account> _Accounts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AccountType> AccountTypes
        {
            get
            {
                if ((_AccountTypes == null))
                {
                    _AccountTypes = base.CreateObjectSet<AccountType>("AccountTypes");
                }
                return _AccountTypes;
            }
        }
        private ObjectSet<AccountType> _AccountTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Appointment> Appointments
        {
            get
            {
                if ((_Appointments == null))
                {
                    _Appointments = base.CreateObjectSet<Appointment>("Appointments");
                }
                return _Appointments;
            }
        }
        private ObjectSet<Appointment> _Appointments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AppointmentStatu> AppointmentStatus
        {
            get
            {
                if ((_AppointmentStatus == null))
                {
                    _AppointmentStatus = base.CreateObjectSet<AppointmentStatu>("AppointmentStatus");
                }
                return _AppointmentStatus;
            }
        }
        private ObjectSet<AppointmentStatu> _AppointmentStatus;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Country> Countries
        {
            get
            {
                if ((_Countries == null))
                {
                    _Countries = base.CreateObjectSet<Country>("Countries");
                }
                return _Countries;
            }
        }
        private ObjectSet<Country> _Countries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Currency> Currencies
        {
            get
            {
                if ((_Currencies == null))
                {
                    _Currencies = base.CreateObjectSet<Currency>("Currencies");
                }
                return _Currencies;
            }
        }
        private ObjectSet<Currency> _Currencies;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FixedRate> FixedRates
        {
            get
            {
                if ((_FixedRates == null))
                {
                    _FixedRates = base.CreateObjectSet<FixedRate>("FixedRates");
                }
                return _FixedRates;
            }
        }
        private ObjectSet<FixedRate> _FixedRates;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Log> Logs
        {
            get
            {
                if ((_Logs == null))
                {
                    _Logs = base.CreateObjectSet<Log>("Logs");
                }
                return _Logs;
            }
        }
        private ObjectSet<Log> _Logs;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<sysdiagram> sysdiagrams
        {
            get
            {
                if ((_sysdiagrams == null))
                {
                    _sysdiagrams = base.CreateObjectSet<sysdiagram>("sysdiagrams");
                }
                return _sysdiagrams;
            }
        }
        private ObjectSet<sysdiagram> _sysdiagrams;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Town> Towns
        {
            get
            {
                if ((_Towns == null))
                {
                    _Towns = base.CreateObjectSet<Town>("Towns");
                }
                return _Towns;
            }
        }
        private ObjectSet<Town> _Towns;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Transaction> Transactions
        {
            get
            {
                if ((_Transactions == null))
                {
                    _Transactions = base.CreateObjectSet<Transaction>("Transactions");
                }
                return _Transactions;
            }
        }
        private ObjectSet<Transaction> _Transactions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TransactionType> TransactionTypes
        {
            get
            {
                if ((_TransactionTypes == null))
                {
                    _TransactionTypes = base.CreateObjectSet<TransactionType>("TransactionTypes");
                }
                return _TransactionTypes;
            }
        }
        private ObjectSet<TransactionType> _TransactionTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserRole> UserRoles
        {
            get
            {
                if ((_UserRoles == null))
                {
                    _UserRoles = base.CreateObjectSet<UserRole>("UserRoles");
                }
                return _UserRoles;
            }
        }
        private ObjectSet<UserRole> _UserRoles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Accounts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccounts(Account account)
        {
            base.AddObject("Accounts", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AccountTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccountTypes(AccountType accountType)
        {
            base.AddObject("AccountTypes", accountType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Appointments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAppointments(Appointment appointment)
        {
            base.AddObject("Appointments", appointment);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AppointmentStatus EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAppointmentStatus(AppointmentStatu appointmentStatu)
        {
            base.AddObject("AppointmentStatus", appointmentStatu);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Countries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCountries(Country country)
        {
            base.AddObject("Countries", country);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Currencies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCurrencies(Currency currency)
        {
            base.AddObject("Currencies", currency);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FixedRates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFixedRates(FixedRate fixedRate)
        {
            base.AddObject("FixedRates", fixedRate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Logs EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLogs(Log log)
        {
            base.AddObject("Logs", log);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the sysdiagrams EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddTosysdiagrams(sysdiagram sysdiagram)
        {
            base.AddObject("sysdiagrams", sysdiagram);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Towns EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTowns(Town town)
        {
            base.AddObject("Towns", town);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Transactions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactions(Transaction transaction)
        {
            base.AddObject("Transactions", transaction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TransactionTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTransactionTypes(TransactionType transactionType)
        {
            base.AddObject("TransactionTypes", transactionType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserRoles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserRoles(UserRole userRole)
        {
            base.AddObject("UserRoles", userRole);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="accountID">Initial value of the AccountID property.</param>
        public static Account CreateAccount(global::System.Int32 accountID)
        {
            Account account = new Account();
            account.AccountID = accountID;
            return account;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AccountID
        {
            get
            {
                return _AccountID;
            }
            set
            {
                if (_AccountID != value)
                {
                    OnAccountIDChanging(value);
                    ReportPropertyChanging("AccountID");
                    _AccountID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccountID");
                    OnAccountIDChanged();
                }
            }
        }
        private global::System.Int32 _AccountID;
        partial void OnAccountIDChanging(global::System.Int32 value);
        partial void OnAccountIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AccountTypeID
        {
            get
            {
                return _AccountTypeID;
            }
            set
            {
                OnAccountTypeIDChanging(value);
                ReportPropertyChanging("AccountTypeID");
                _AccountTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountTypeID");
                OnAccountTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _AccountTypeID;
        partial void OnAccountTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnAccountTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountFriendlyName
        {
            get
            {
                return _AccountFriendlyName;
            }
            set
            {
                OnAccountFriendlyNameChanging(value);
                ReportPropertyChanging("AccountFriendlyName");
                _AccountFriendlyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountFriendlyName");
                OnAccountFriendlyNameChanged();
            }
        }
        private global::System.String _AccountFriendlyName;
        partial void OnAccountFriendlyNameChanging(global::System.String value);
        partial void OnAccountFriendlyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                OnCurrencyIDChanging(value);
                ReportPropertyChanging("CurrencyID");
                _CurrencyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyID");
                OnCurrencyIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CurrencyID;
        partial void OnCurrencyIDChanging(Nullable<global::System.Int32> value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Balance
        {
            get
            {
                return _Balance;
            }
            set
            {
                OnBalanceChanging(value);
                ReportPropertyChanging("Balance");
                _Balance = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Balance");
                OnBalanceChanged();
            }
        }
        private Nullable<global::System.Decimal> _Balance;
        partial void OnBalanceChanging(Nullable<global::System.Decimal> value);
        partial void OnBalanceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FixedRateID
        {
            get
            {
                return _FixedRateID;
            }
            set
            {
                OnFixedRateIDChanging(value);
                ReportPropertyChanging("FixedRateID");
                _FixedRateID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FixedRateID");
                OnFixedRateIDChanged();
            }
        }
        private Nullable<global::System.Int32> _FixedRateID;
        partial void OnFixedRateIDChanging(Nullable<global::System.Int32> value);
        partial void OnFixedRateIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> renewal
        {
            get
            {
                return _renewal;
            }
            set
            {
                OnrenewalChanging(value);
                ReportPropertyChanging("renewal");
                _renewal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("renewal");
                OnrenewalChanged();
            }
        }
        private Nullable<global::System.DateTime> _renewal;
        partial void OnrenewalChanging(Nullable<global::System.DateTime> value);
        partial void OnrenewalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FromAccountID
        {
            get
            {
                return _FromAccountID;
            }
            set
            {
                OnFromAccountIDChanging(value);
                ReportPropertyChanging("FromAccountID");
                _FromAccountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromAccountID");
                OnFromAccountIDChanged();
            }
        }
        private Nullable<global::System.Int32> _FromAccountID;
        partial void OnFromAccountIDChanging(Nullable<global::System.Int32> value);
        partial void OnFromAccountIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CreationDate
        {
            get
            {
                return _CreationDate;
            }
            set
            {
                OnCreationDateChanging(value);
                ReportPropertyChanging("CreationDate");
                _CreationDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationDate");
                OnCreationDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CreationDate;
        partial void OnCreationDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCreationDateChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_AccountTypes", "AccountTypes")]
        public AccountType AccountType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("DSAModel.FK_Accounts_AccountTypes", "AccountTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("DSAModel.FK_Accounts_AccountTypes", "AccountTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AccountType> AccountTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AccountType>("DSAModel.FK_Accounts_AccountTypes", "AccountTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AccountType>("DSAModel.FK_Accounts_AccountTypes", "AccountTypes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_Currencies", "Currencies")]
        public Currency Currency
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("DSAModel.FK_Accounts_Currencies", "Currencies").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("DSAModel.FK_Accounts_Currencies", "Currencies").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Currency>("DSAModel.FK_Accounts_Currencies", "Currencies");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Currency>("DSAModel.FK_Accounts_Currencies", "Currencies", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_FixedRates", "FixedRates")]
        public FixedRate FixedRate
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FixedRate>("DSAModel.FK_Accounts_FixedRates", "FixedRates").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FixedRate>("DSAModel.FK_Accounts_FixedRates", "FixedRates").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FixedRate> FixedRateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FixedRate>("DSAModel.FK_Accounts_FixedRates", "FixedRates");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FixedRate>("DSAModel.FK_Accounts_FixedRates", "FixedRates", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="AccountType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AccountType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AccountType object.
        /// </summary>
        /// <param name="accountTypeID">Initial value of the AccountTypeID property.</param>
        public static AccountType CreateAccountType(global::System.Int32 accountTypeID)
        {
            AccountType accountType = new AccountType();
            accountType.AccountTypeID = accountTypeID;
            return accountType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AccountTypeID
        {
            get
            {
                return _AccountTypeID;
            }
            set
            {
                if (_AccountTypeID != value)
                {
                    OnAccountTypeIDChanging(value);
                    ReportPropertyChanging("AccountTypeID");
                    _AccountTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccountTypeID");
                    OnAccountTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _AccountTypeID;
        partial void OnAccountTypeIDChanging(global::System.Int32 value);
        partial void OnAccountTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String AccountType1
        {
            get
            {
                return _AccountType1;
            }
            set
            {
                OnAccountType1Changing(value);
                ReportPropertyChanging("AccountType1");
                _AccountType1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("AccountType1");
                OnAccountType1Changed();
            }
        }
        private global::System.String _AccountType1;
        partial void OnAccountType1Changing(global::System.String value);
        partial void OnAccountType1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_AccountTypes", "Accounts")]
        public EntityCollection<Account> Accounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account>("DSAModel.FK_Accounts_AccountTypes", "Accounts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account>("DSAModel.FK_Accounts_AccountTypes", "Accounts", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Appointment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Appointment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Appointment object.
        /// </summary>
        /// <param name="appointmentID">Initial value of the AppointmentID property.</param>
        public static Appointment CreateAppointment(global::System.Int32 appointmentID)
        {
            Appointment appointment = new Appointment();
            appointment.AppointmentID = appointmentID;
            return appointment;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AppointmentID
        {
            get
            {
                return _AppointmentID;
            }
            set
            {
                if (_AppointmentID != value)
                {
                    OnAppointmentIDChanging(value);
                    ReportPropertyChanging("AppointmentID");
                    _AppointmentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AppointmentID");
                    OnAppointmentIDChanged();
                }
            }
        }
        private global::System.Int32 _AppointmentID;
        partial void OnAppointmentIDChanging(global::System.Int32 value);
        partial void OnAppointmentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AppointmentStatusID
        {
            get
            {
                return _AppointmentStatusID;
            }
            set
            {
                OnAppointmentStatusIDChanging(value);
                ReportPropertyChanging("AppointmentStatusID");
                _AppointmentStatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AppointmentStatusID");
                OnAppointmentStatusIDChanged();
            }
        }
        private Nullable<global::System.Int32> _AppointmentStatusID;
        partial void OnAppointmentStatusIDChanging(Nullable<global::System.Int32> value);
        partial void OnAppointmentStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Time
        {
            get
            {
                return _Time;
            }
            set
            {
                OnTimeChanging(value);
                ReportPropertyChanging("Time");
                _Time = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Time");
                OnTimeChanged();
            }
        }
        private global::System.String _Time;
        partial void OnTimeChanging(global::System.String value);
        partial void OnTimeChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Appointments_AppointmentStatus", "AppointmentStatus")]
        public AppointmentStatu AppointmentStatu
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AppointmentStatu>("DSAModel.FK_Appointments_AppointmentStatus", "AppointmentStatus").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AppointmentStatu>("DSAModel.FK_Appointments_AppointmentStatus", "AppointmentStatus").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AppointmentStatu> AppointmentStatuReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AppointmentStatu>("DSAModel.FK_Appointments_AppointmentStatus", "AppointmentStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AppointmentStatu>("DSAModel.FK_Appointments_AppointmentStatus", "AppointmentStatus", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Appointments_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("DSAModel.FK_Appointments_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("DSAModel.FK_Appointments_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("DSAModel.FK_Appointments_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("DSAModel.FK_Appointments_Users", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="AppointmentStatu")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AppointmentStatu : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AppointmentStatu object.
        /// </summary>
        /// <param name="appointmentStatusID">Initial value of the AppointmentStatusID property.</param>
        public static AppointmentStatu CreateAppointmentStatu(global::System.Int32 appointmentStatusID)
        {
            AppointmentStatu appointmentStatu = new AppointmentStatu();
            appointmentStatu.AppointmentStatusID = appointmentStatusID;
            return appointmentStatu;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AppointmentStatusID
        {
            get
            {
                return _AppointmentStatusID;
            }
            set
            {
                if (_AppointmentStatusID != value)
                {
                    OnAppointmentStatusIDChanging(value);
                    ReportPropertyChanging("AppointmentStatusID");
                    _AppointmentStatusID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AppointmentStatusID");
                    OnAppointmentStatusIDChanged();
                }
            }
        }
        private global::System.Int32 _AppointmentStatusID;
        partial void OnAppointmentStatusIDChanging(global::System.Int32 value);
        partial void OnAppointmentStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Appointments_AppointmentStatus", "Appointments")]
        public EntityCollection<Appointment> Appointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Appointment>("DSAModel.FK_Appointments_AppointmentStatus", "Appointments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Appointment>("DSAModel.FK_Appointments_AppointmentStatus", "Appointments", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Country")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Country : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="countryID">Initial value of the CountryID property.</param>
        public static Country CreateCountry(global::System.Int32 countryID)
        {
            Country country = new Country();
            country.CountryID = countryID;
            return country;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                if (_CountryID != value)
                {
                    OnCountryIDChanging(value);
                    ReportPropertyChanging("CountryID");
                    _CountryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CountryID");
                    OnCountryIDChanged();
                }
            }
        }
        private global::System.Int32 _CountryID;
        partial void OnCountryIDChanging(global::System.Int32 value);
        partial void OnCountryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Country1
        {
            get
            {
                return _Country1;
            }
            set
            {
                OnCountry1Changing(value);
                ReportPropertyChanging("Country1");
                _Country1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Country1");
                OnCountry1Changed();
            }
        }
        private global::System.String _Country1;
        partial void OnCountry1Changing(global::System.String value);
        partial void OnCountry1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Towns_Countries", "Towns")]
        public EntityCollection<Town> Towns
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Town>("DSAModel.FK_Towns_Countries", "Towns");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Town>("DSAModel.FK_Towns_Countries", "Towns", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Currency")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Currency : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="currencyID">Initial value of the CurrencyID property.</param>
        public static Currency CreateCurrency(global::System.Int32 currencyID)
        {
            Currency currency = new Currency();
            currency.CurrencyID = currencyID;
            return currency;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                if (_CurrencyID != value)
                {
                    OnCurrencyIDChanging(value);
                    ReportPropertyChanging("CurrencyID");
                    _CurrencyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CurrencyID");
                    OnCurrencyIDChanged();
                }
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Currency1
        {
            get
            {
                return _Currency1;
            }
            set
            {
                OnCurrency1Changing(value);
                ReportPropertyChanging("Currency1");
                _Currency1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Currency1");
                OnCurrency1Changed();
            }
        }
        private global::System.String _Currency1;
        partial void OnCurrency1Changing(global::System.String value);
        partial void OnCurrency1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_Currencies", "Accounts")]
        public EntityCollection<Account> Accounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account>("DSAModel.FK_Accounts_Currencies", "Accounts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account>("DSAModel.FK_Accounts_Currencies", "Accounts", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="FixedRate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FixedRate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FixedRate object.
        /// </summary>
        /// <param name="fixedRateID">Initial value of the FixedRateID property.</param>
        public static FixedRate CreateFixedRate(global::System.Int32 fixedRateID)
        {
            FixedRate fixedRate = new FixedRate();
            fixedRate.FixedRateID = fixedRateID;
            return fixedRate;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FixedRateID
        {
            get
            {
                return _FixedRateID;
            }
            set
            {
                if (_FixedRateID != value)
                {
                    OnFixedRateIDChanging(value);
                    ReportPropertyChanging("FixedRateID");
                    _FixedRateID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FixedRateID");
                    OnFixedRateIDChanged();
                }
            }
        }
        private global::System.Int32 _FixedRateID;
        partial void OnFixedRateIDChanging(global::System.Int32 value);
        partial void OnFixedRateIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> FixedRate1
        {
            get
            {
                return _FixedRate1;
            }
            set
            {
                OnFixedRate1Changing(value);
                ReportPropertyChanging("FixedRate1");
                _FixedRate1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FixedRate1");
                OnFixedRate1Changed();
            }
        }
        private Nullable<global::System.Decimal> _FixedRate1;
        partial void OnFixedRate1Changing(Nullable<global::System.Decimal> value);
        partial void OnFixedRate1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                OnDurationChanging(value);
                ReportPropertyChanging("Duration");
                _Duration = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Duration");
                OnDurationChanged();
            }
        }
        private Nullable<global::System.Int32> _Duration;
        partial void OnDurationChanging(Nullable<global::System.Int32> value);
        partial void OnDurationChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Accounts_FixedRates", "Accounts")]
        public EntityCollection<Account> Accounts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account>("DSAModel.FK_Accounts_FixedRates", "Accounts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account>("DSAModel.FK_Accounts_FixedRates", "Accounts", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Log")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Log : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Log object.
        /// </summary>
        /// <param name="logID">Initial value of the LogID property.</param>
        public static Log CreateLog(global::System.Int32 logID)
        {
            Log log = new Log();
            log.LogID = logID;
            return log;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LogID
        {
            get
            {
                return _LogID;
            }
            set
            {
                if (_LogID != value)
                {
                    OnLogIDChanging(value);
                    ReportPropertyChanging("LogID");
                    _LogID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LogID");
                    OnLogIDChanged();
                }
            }
        }
        private global::System.Int32 _LogID;
        partial void OnLogIDChanging(global::System.Int32 value);
        partial void OnLogIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> AccountID
        {
            get
            {
                return _AccountID;
            }
            set
            {
                OnAccountIDChanging(value);
                ReportPropertyChanging("AccountID");
                _AccountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountID");
                OnAccountIDChanged();
            }
        }
        private Nullable<global::System.Int32> _AccountID;
        partial void OnAccountIDChanging(Nullable<global::System.Int32> value);
        partial void OnAccountIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                OnUserIDChanging(value);
                ReportPropertyChanging("UserID");
                _UserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID");
                OnUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID;
        partial void OnUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="sysdiagram")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class sysdiagram : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new sysdiagram object.
        /// </summary>
        /// <param name="name">Initial value of the name property.</param>
        /// <param name="principal_id">Initial value of the principal_id property.</param>
        /// <param name="diagram_id">Initial value of the diagram_id property.</param>
        public static sysdiagram Createsysdiagram(global::System.String name, global::System.Int32 principal_id, global::System.Int32 diagram_id)
        {
            sysdiagram sysdiagram = new sysdiagram();
            sysdiagram.name = name;
            sysdiagram.principal_id = principal_id;
            sysdiagram.diagram_id = diagram_id;
            return sysdiagram;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String name
        {
            get
            {
                return _name;
            }
            set
            {
                OnnameChanging(value);
                ReportPropertyChanging("name");
                _name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("name");
                OnnameChanged();
            }
        }
        private global::System.String _name;
        partial void OnnameChanging(global::System.String value);
        partial void OnnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 principal_id
        {
            get
            {
                return _principal_id;
            }
            set
            {
                Onprincipal_idChanging(value);
                ReportPropertyChanging("principal_id");
                _principal_id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("principal_id");
                Onprincipal_idChanged();
            }
        }
        private global::System.Int32 _principal_id;
        partial void Onprincipal_idChanging(global::System.Int32 value);
        partial void Onprincipal_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 diagram_id
        {
            get
            {
                return _diagram_id;
            }
            set
            {
                if (_diagram_id != value)
                {
                    Ondiagram_idChanging(value);
                    ReportPropertyChanging("diagram_id");
                    _diagram_id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("diagram_id");
                    Ondiagram_idChanged();
                }
            }
        }
        private global::System.Int32 _diagram_id;
        partial void Ondiagram_idChanging(global::System.Int32 value);
        partial void Ondiagram_idChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> version
        {
            get
            {
                return _version;
            }
            set
            {
                OnversionChanging(value);
                ReportPropertyChanging("version");
                _version = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("version");
                OnversionChanged();
            }
        }
        private Nullable<global::System.Int32> _version;
        partial void OnversionChanging(Nullable<global::System.Int32> value);
        partial void OnversionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] definition
        {
            get
            {
                return StructuralObject.GetValidValue(_definition);
            }
            set
            {
                OndefinitionChanging(value);
                ReportPropertyChanging("definition");
                _definition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("definition");
                OndefinitionChanged();
            }
        }
        private global::System.Byte[] _definition;
        partial void OndefinitionChanging(global::System.Byte[] value);
        partial void OndefinitionChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Town")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Town : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Town object.
        /// </summary>
        /// <param name="townID">Initial value of the TownID property.</param>
        public static Town CreateTown(global::System.Int32 townID)
        {
            Town town = new Town();
            town.TownID = townID;
            return town;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TownID
        {
            get
            {
                return _TownID;
            }
            set
            {
                if (_TownID != value)
                {
                    OnTownIDChanging(value);
                    ReportPropertyChanging("TownID");
                    _TownID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TownID");
                    OnTownIDChanged();
                }
            }
        }
        private global::System.Int32 _TownID;
        partial void OnTownIDChanging(global::System.Int32 value);
        partial void OnTownIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Town1
        {
            get
            {
                return _Town1;
            }
            set
            {
                OnTown1Changing(value);
                ReportPropertyChanging("Town1");
                _Town1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Town1");
                OnTown1Changed();
            }
        }
        private global::System.String _Town1;
        partial void OnTown1Changing(global::System.String value);
        partial void OnTown1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> CountryID
        {
            get
            {
                return _CountryID;
            }
            set
            {
                OnCountryIDChanging(value);
                ReportPropertyChanging("CountryID");
                _CountryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountryID");
                OnCountryIDChanged();
            }
        }
        private Nullable<global::System.Int32> _CountryID;
        partial void OnCountryIDChanging(Nullable<global::System.Int32> value);
        partial void OnCountryIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Towns_Countries", "Countries")]
        public Country Country
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("DSAModel.FK_Towns_Countries", "Countries").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("DSAModel.FK_Towns_Countries", "Countries").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Country> CountryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Country>("DSAModel.FK_Towns_Countries", "Countries");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Country>("DSAModel.FK_Towns_Countries", "Countries", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Users_Towns", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("DSAModel.FK_Users_Towns", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("DSAModel.FK_Users_Towns", "Users", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="Transaction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Transaction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Transaction object.
        /// </summary>
        /// <param name="transactionID">Initial value of the TransactionID property.</param>
        /// <param name="amount">Initial value of the Amount property.</param>
        /// <param name="currencyID">Initial value of the CurrencyID property.</param>
        /// <param name="fromAccountID">Initial value of the FromAccountID property.</param>
        /// <param name="toAccountID">Initial value of the ToAccountID property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        public static Transaction CreateTransaction(global::System.Int32 transactionID, global::System.Decimal amount, global::System.Int32 currencyID, global::System.Int32 fromAccountID, global::System.Int32 toAccountID, global::System.DateTime date)
        {
            Transaction transaction = new Transaction();
            transaction.TransactionID = transactionID;
            transaction.Amount = amount;
            transaction.CurrencyID = currencyID;
            transaction.FromAccountID = fromAccountID;
            transaction.ToAccountID = toAccountID;
            transaction.Date = date;
            return transaction;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TransactionID
        {
            get
            {
                return _TransactionID;
            }
            set
            {
                if (_TransactionID != value)
                {
                    OnTransactionIDChanging(value);
                    ReportPropertyChanging("TransactionID");
                    _TransactionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TransactionID");
                    OnTransactionIDChanged();
                }
            }
        }
        private global::System.Int32 _TransactionID;
        partial void OnTransactionIDChanging(global::System.Int32 value);
        partial void OnTransactionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal Amount
        {
            get
            {
                return _Amount;
            }
            set
            {
                OnAmountChanging(value);
                ReportPropertyChanging("Amount");
                _Amount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Amount");
                OnAmountChanged();
            }
        }
        private global::System.Decimal _Amount;
        partial void OnAmountChanging(global::System.Decimal value);
        partial void OnAmountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CurrencyID
        {
            get
            {
                return _CurrencyID;
            }
            set
            {
                OnCurrencyIDChanging(value);
                ReportPropertyChanging("CurrencyID");
                _CurrencyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrencyID");
                OnCurrencyIDChanged();
            }
        }
        private global::System.Int32 _CurrencyID;
        partial void OnCurrencyIDChanging(global::System.Int32 value);
        partial void OnCurrencyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FromAccountID
        {
            get
            {
                return _FromAccountID;
            }
            set
            {
                OnFromAccountIDChanging(value);
                ReportPropertyChanging("FromAccountID");
                _FromAccountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromAccountID");
                OnFromAccountIDChanged();
            }
        }
        private global::System.Int32 _FromAccountID;
        partial void OnFromAccountIDChanging(global::System.Int32 value);
        partial void OnFromAccountIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ToAccountID
        {
            get
            {
                return _ToAccountID;
            }
            set
            {
                OnToAccountIDChanging(value);
                ReportPropertyChanging("ToAccountID");
                _ToAccountID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ToAccountID");
                OnToAccountIDChanged();
            }
        }
        private global::System.Int32 _ToAccountID;
        partial void OnToAccountIDChanging(global::System.Int32 value);
        partial void OnToAccountIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TransactionTypeID
        {
            get
            {
                return _TransactionTypeID;
            }
            set
            {
                OnTransactionTypeIDChanging(value);
                ReportPropertyChanging("TransactionTypeID");
                _TransactionTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TransactionTypeID");
                OnTransactionTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _TransactionTypeID;
        partial void OnTransactionTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnTransactionTypeIDChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Transactions_TransactionTypes", "TransactionTypes")]
        public TransactionType TransactionType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TransactionType>("DSAModel.FK_Transactions_TransactionTypes", "TransactionTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TransactionType>("DSAModel.FK_Transactions_TransactionTypes", "TransactionTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TransactionType> TransactionTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TransactionType>("DSAModel.FK_Transactions_TransactionTypes", "TransactionTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TransactionType>("DSAModel.FK_Transactions_TransactionTypes", "TransactionTypes", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="TransactionType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TransactionType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TransactionType object.
        /// </summary>
        /// <param name="transactionTypeID">Initial value of the TransactionTypeID property.</param>
        public static TransactionType CreateTransactionType(global::System.Int32 transactionTypeID)
        {
            TransactionType transactionType = new TransactionType();
            transactionType.TransactionTypeID = transactionTypeID;
            return transactionType;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TransactionTypeID
        {
            get
            {
                return _TransactionTypeID;
            }
            set
            {
                if (_TransactionTypeID != value)
                {
                    OnTransactionTypeIDChanging(value);
                    ReportPropertyChanging("TransactionTypeID");
                    _TransactionTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TransactionTypeID");
                    OnTransactionTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _TransactionTypeID;
        partial void OnTransactionTypeIDChanging(global::System.Int32 value);
        partial void OnTransactionTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TransactionType1
        {
            get
            {
                return _TransactionType1;
            }
            set
            {
                OnTransactionType1Changing(value);
                ReportPropertyChanging("TransactionType1");
                _TransactionType1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TransactionType1");
                OnTransactionType1Changed();
            }
        }
        private global::System.String _TransactionType1;
        partial void OnTransactionType1Changing(global::System.String value);
        partial void OnTransactionType1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Transactions_TransactionTypes", "Transactions")]
        public EntityCollection<Transaction> Transactions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Transaction>("DSAModel.FK_Transactions_TransactionTypes", "Transactions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Transaction>("DSAModel.FK_Transactions_TransactionTypes", "Transactions", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userID">Initial value of the UserID property.</param>
        public static User CreateUser(global::System.Int32 userID)
        {
            User user = new User();
            user.UserID = userID;
            return user;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Surname
        {
            get
            {
                return _Surname;
            }
            set
            {
                OnSurnameChanging(value);
                ReportPropertyChanging("Surname");
                _Surname = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Surname");
                OnSurnameChanged();
            }
        }
        private global::System.String _Surname;
        partial void OnSurnameChanging(global::System.String value);
        partial void OnSurnameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DateOfBirth
        {
            get
            {
                return _DateOfBirth;
            }
            set
            {
                OnDateOfBirthChanging(value);
                ReportPropertyChanging("DateOfBirth");
                _DateOfBirth = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DateOfBirth");
                OnDateOfBirthChanged();
            }
        }
        private global::System.String _DateOfBirth;
        partial void OnDateOfBirthChanging(global::System.String value);
        partial void OnDateOfBirthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HouseName
        {
            get
            {
                return _HouseName;
            }
            set
            {
                OnHouseNameChanging(value);
                ReportPropertyChanging("HouseName");
                _HouseName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HouseName");
                OnHouseNameChanged();
            }
        }
        private global::System.String _HouseName;
        partial void OnHouseNameChanging(global::System.String value);
        partial void OnHouseNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HouseNumber
        {
            get
            {
                return _HouseNumber;
            }
            set
            {
                OnHouseNumberChanging(value);
                ReportPropertyChanging("HouseNumber");
                _HouseNumber = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HouseNumber");
                OnHouseNumberChanged();
            }
        }
        private global::System.String _HouseNumber;
        partial void OnHouseNumberChanging(global::System.String value);
        partial void OnHouseNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> TownID
        {
            get
            {
                return _TownID;
            }
            set
            {
                OnTownIDChanging(value);
                ReportPropertyChanging("TownID");
                _TownID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TownID");
                OnTownIDChanged();
            }
        }
        private Nullable<global::System.Int32> _TownID;
        partial void OnTownIDChanging(Nullable<global::System.Int32> value);
        partial void OnTownIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserRoleID
        {
            get
            {
                return _UserRoleID;
            }
            set
            {
                OnUserRoleIDChanging(value);
                ReportPropertyChanging("UserRoleID");
                _UserRoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserRoleID");
                OnUserRoleIDChanged();
            }
        }
        private Nullable<global::System.Int32> _UserRoleID;
        partial void OnUserRoleIDChanging(Nullable<global::System.Int32> value);
        partial void OnUserRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String EmailAddress
        {
            get
            {
                return _EmailAddress;
            }
            set
            {
                OnEmailAddressChanging(value);
                ReportPropertyChanging("EmailAddress");
                _EmailAddress = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("EmailAddress");
                OnEmailAddressChanged();
            }
        }
        private global::System.String _EmailAddress;
        partial void OnEmailAddressChanging(global::System.String value);
        partial void OnEmailAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Pin
        {
            get
            {
                return _Pin;
            }
            set
            {
                OnPinChanging(value);
                ReportPropertyChanging("Pin");
                _Pin = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Pin");
                OnPinChanged();
            }
        }
        private global::System.String _Pin;
        partial void OnPinChanging(global::System.String value);
        partial void OnPinChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Appointments_Users", "Appointments")]
        public EntityCollection<Appointment> Appointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Appointment>("DSAModel.FK_Appointments_Users", "Appointments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Appointment>("DSAModel.FK_Appointments_Users", "Appointments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Users_Towns", "Towns")]
        public Town Town
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Town>("DSAModel.FK_Users_Towns", "Towns").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Town>("DSAModel.FK_Users_Towns", "Towns").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Town> TownReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Town>("DSAModel.FK_Users_Towns", "Towns");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Town>("DSAModel.FK_Users_Towns", "Towns", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Users_UserRoles", "UserRoles")]
        public UserRole UserRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("DSAModel.FK_Users_UserRoles", "UserRoles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("DSAModel.FK_Users_UserRoles", "UserRoles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UserRole> UserRoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UserRole>("DSAModel.FK_Users_UserRoles", "UserRoles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UserRole>("DSAModel.FK_Users_UserRoles", "UserRoles", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DSAModel", Name="UserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRole : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserRole object.
        /// </summary>
        /// <param name="userRoleID">Initial value of the UserRoleID property.</param>
        public static UserRole CreateUserRole(global::System.Int32 userRoleID)
        {
            UserRole userRole = new UserRole();
            userRole.UserRoleID = userRoleID;
            return userRole;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserRoleID
        {
            get
            {
                return _UserRoleID;
            }
            set
            {
                if (_UserRoleID != value)
                {
                    OnUserRoleIDChanging(value);
                    ReportPropertyChanging("UserRoleID");
                    _UserRoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserRoleID");
                    OnUserRoleIDChanged();
                }
            }
        }
        private global::System.Int32 _UserRoleID;
        partial void OnUserRoleIDChanging(global::System.Int32 value);
        partial void OnUserRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String UserRole1
        {
            get
            {
                return _UserRole1;
            }
            set
            {
                OnUserRole1Changing(value);
                ReportPropertyChanging("UserRole1");
                _UserRole1 = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("UserRole1");
                OnUserRole1Changed();
            }
        }
        private global::System.String _UserRole1;
        partial void OnUserRole1Changing(global::System.String value);
        partial void OnUserRole1Changed();

        #endregion

    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DSAModel", "FK_Users_UserRoles", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("DSAModel.FK_Users_UserRoles", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("DSAModel.FK_Users_UserRoles", "Users", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
